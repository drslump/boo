
buildscript {
	repositories {
		ivy { url '../repository' }
		ivy { url 'http://unity-technologies.github.com/kaizen/repositories/unstable' }
		mavenCentral()
	}
	dependencies {
		classpath 'kaizen:kaizen:0.2.2'
	}
}

version = file('version.txt').text.trim()

subprojects {
	version = rootProject.version
}

allprojects {
	repositories {
		ivy { url 'http://unity-technologies.github.com/kaizen/repositories/unstable' }
	}
}

apply plugin: 'kaizen-bundle'
apply plugin: 'idea'

project(':booc').afterEvaluate { boocProject ->

	// compile boo projects with the freshly built booc.exe
	def boocCompileTask = boocProject.tasks.compileDefault
	rootProject.unity.mono.booc.executable = boocCompileTask.assemblyFile

	def booLangExtensions = project(':Boo.Lang.Extensions')
	booLangExtensions.tasks.compileDefault.dependsOn boocCompileTask

	def booProjects = [
		':Boo.Lang.Useful',
		':Boo.Lang.PatternMatching',
		':Boo.Lang.Interpreter',
		':Boo.Lang.CodeDom',
	]
	booProjects.each {
		rootProject.project(it) {
			compileDefault {
				dependsOn booLangExtensions.tasks.compileDefault
			}
		}
	}
}

project(':Boo.Lang.Extensions') {
	compileDefault {
		customArgs = ['-nostdlib', '-r:System.Core.dll']
	}
	dependencies {
		'default' project(':Boo.Lang')
		'default' project(':Boo.Lang.Compiler')
	}
}

project(':Boo.Lang') {
	configurations {
		windowsPhone8
		iOS
	}
	compileWindowsPhone8.defines = ['NO_SERIALIZATION_INFO', 'NO_SYSTEM_PROCESS', 'NO_ICLONEABLE']
	compileIOS.defines = ['NO_SYSTEM_REFLECTION_EMIT', 'NO_SYSTEM_PROCESS', 'NO_REGEX']
}

project(':Boo.Lang.Compiler') {
	dependencies {
		'default' project(':Boo.Lang')
	}
}

project(':Boo.Lang.Parser') {
	dependencies {
		'default' project(':Boo.Lang')
		'default' project(':Boo.Lang.Compiler')
	}
}

project(':Boo.Lang.Useful') {
	dependencies {
		'default' project(':Boo.Lang')
		'default' project(':Boo.Lang.Parser')
	}
}

project(':Boo.Lang.PatternMatching') {
	dependencies {
		'default' project(':Boo.Lang')
	}
}

project(':Boo.Lang.CodeDom') {
	dependencies {
		'default' project(':Boo.Lang')
		'default' project(':Boo.Lang.Compiler')
	}
}

project(':Boo.Lang.Interpreter') {
	compileDefault {
		customArgs = ['-nostdlib', '-r:System.Core']
	}
	dependencies {
		'default' project(':Boo.Lang')
		'default' project(':Boo.Lang.Extensions')
		'default' project(':Boo.Lang.Compiler')
		'default' project(':Boo.Lang.Parser')
		'default' project(':Boo.Lang.PatternMatching')
	}
}

project(':booish') {
	assembly {
		target = 'exe'
	}
	dependencies {
		'default' project(':Boo.Lang')
		'default' project(':Boo.Lang.Interpreter')
	}
}

project(':booi') {
	assembly {
		target = 'exe'
	}
	compileDefault {
		customArgs = ['-nostdlib']
	}
	dependencies {
		'default' project(':Boo.Lang')
		'default' project(':Boo.Lang.Extensions')
		'default' project(':Boo.Lang.Useful')
		'default' project(':Boo.Lang.Compiler')
		'default' project(':Boo.Lang.Parser')
		'default' project(':Boo.Lang.PatternMatching')
	}
}

project(':booc') {
	assembly {
		target = 'exe'
	}
	dependencies {
		'default' project(':Boo.Lang')
		'default' project(':Boo.Lang.Compiler')
		'default' project(':Boo.Lang.Parser')
	}
}

subprojects {
	assembly {
		keyFile = rootProject.file('src/boo.snk')
	}
}

dependencies {
	subprojects.findAll { it.projectDir.parentFile.name == 'src' }.each {
		'default' project(it.path)
	}
}

project(':Boo.Lang') {
	def retargetAssemblyTask = project(':RetargetAssembly').tasks.compileDefault
	tasks.compileWindowsPhone8 {
		inputs.file retargetAssemblyTask.assemblyFile
		dependsOn retargetAssemblyTask
		doLast {
			project.exec {
				executable rootProject.extensions.unity.monoBleedingEdge.cli
				args retargetAssemblyTask.assemblyFile
				args "-keyfile:${rootProject.file('src/boo.snk')}"
				args assemblyFile
			}
		}
	}
}
